// <auto-generated />
using System;
using DataAccessEF.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessEF.Migrations
{
    [DbContext(typeof(MedicalPlusDbContext))]
    [Migration("20240122155409_m1")]
    partial class m1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Action", b =>
                {
                    b.Property<int>("IdAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAction"));

                    b.Property<string>("ActionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Action");

                    b.HasKey("IdAction");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("Domain.Models.Difficulty", b =>
                {
                    b.Property<int>("IdDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDifficulty"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDifficulty");

                    b.ToTable("Difficulties");
                });

            modelBuilder.Entity("Domain.Models.Fio", b =>
                {
                    b.Property<int>("IdFio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFio"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFio")
                        .HasName("PK_FIOes");

                    b.ToTable("FIOs", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Gender", b =>
                {
                    b.Property<int>("IdGender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGender"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGender");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Domain.Models.Log", b =>
                {
                    b.Property<int>("IdLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLog"));

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdAction")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLog");

                    b.HasIndex("IdAction");

                    b.HasIndex("IdUser");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.Property<int>("IdPatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPatient"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdFio")
                        .HasColumnType("int");

                    b.Property<int?>("IdGender")
                        .HasColumnType("int");

                    b.Property<int?>("IdProblem")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("IdPatient");

                    b.HasIndex("IdFio");

                    b.HasIndex("IdGender");

                    b.HasIndex("IdProblem");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Domain.Models.Problem", b =>
                {
                    b.Property<int>("IdProblem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProblem"));

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdDifficulty")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("MacroDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MicroDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProblem");

                    b.HasIndex("IdDifficulty");

                    b.HasIndex("IdUser");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRole");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<int?>("IdFio")
                        .HasColumnType("int");

                    b.Property<int?>("IdRole")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.HasIndex("IdFio");

                    b.HasIndex("IdRole");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Log", b =>
                {
                    b.HasOne("Domain.Models.Action", "IdActionNavigation")
                        .WithMany("Logs")
                        .HasForeignKey("IdAction")
                        .HasConstraintName("FK_Logs_Actions");

                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("Logs")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Logs_Users");

                    b.Navigation("IdActionNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.Patient", b =>
                {
                    b.HasOne("Domain.Models.Fio", "IdFioNavigation")
                        .WithMany("Patients")
                        .HasForeignKey("IdFio")
                        .HasConstraintName("FK_Patients_FIOs");

                    b.HasOne("Domain.Models.Gender", "IdGenderNavigation")
                        .WithMany("Patients")
                        .HasForeignKey("IdGender")
                        .HasConstraintName("FK_Patients_Genders");

                    b.HasOne("Domain.Models.Problem", "IdProblemNavigation")
                        .WithMany("Patients")
                        .HasForeignKey("IdProblem")
                        .HasConstraintName("FK_Patients_Problems");

                    b.Navigation("IdFioNavigation");

                    b.Navigation("IdGenderNavigation");

                    b.Navigation("IdProblemNavigation");
                });

            modelBuilder.Entity("Domain.Models.Problem", b =>
                {
                    b.HasOne("Domain.Models.Difficulty", "IdDifficultyNavigation")
                        .WithMany("Problems")
                        .HasForeignKey("IdDifficulty")
                        .HasConstraintName("FK_Problems_Difficulties");

                    b.HasOne("Domain.Models.User", "IdUserNavigation")
                        .WithMany("Problems")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Problems_Users");

                    b.Navigation("IdDifficultyNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.Fio", "IdFioNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdFio")
                        .HasConstraintName("FK_Users_FIOs");

                    b.HasOne("Domain.Models.Role", "IdRoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("IdFioNavigation");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("Domain.Models.Action", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Domain.Models.Difficulty", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("Domain.Models.Fio", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.Gender", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Models.Problem", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Problems");
                });
#pragma warning restore 612, 618
        }
    }
}
